metadata=metadata_vals)
}
read_qiime_otu_table("alpine_ridge_data/OTU_table.csv")
#'   tables generated with QIIME, so we default to TRUE.
#' @param metadata TRUE if the OTU table contains a metadata column, otherwise
#'   FALSE.  The metadata column usually contains taxonomic assignments, and
#'   must be located on the right-hand side of the table.
#' @return A list with four attributes: sample_ids, otu_ids, counts, and
#'   metadata, a data structure similar to that returned by the python
#'   function `qiime.parse.parse_otu_table`.  The sample_ids, otu_ids, and
#'   metadata attributes are character vectors.  The counts attribute is a
#'   matrix with one column per sample_id and one row per otu_id.
#' @export
read_qiime_otu_table <- function(filepath, commented=FALSE, metadata=FALSE) {
f <- file(filepath, "rt")
header_line <- readLines(f, n=1)
if (commented) {
header_line <- readLines(f, n=1)
}
col_names <- strsplit(header_line, "\t")[[1]]
col_classes <- rep("numeric", times=length(col_names))
col_classes[1] <- "character"
if (metadata) {
col_classes[length(col_classes)] <- "character"
}
full_otu_table <- read.table(
f, col.names=col_names, colClasses=col_classes, sep="\t",
quote="", as.is=TRUE, header=FALSE)
close(f)
data_cols <- if (metadata) {
2:(length(col_names) - 1)
} else {
2:length(col_names)
}
sample_ids <- col_names[data_cols]
otu_ids <- as.character(full_otu_table[,1])
counts <- as.matrix(full_otu_table[,data_cols])
rownames(counts) <- otu_ids
if (metadata) {
metadata_vals <- as.character(full_otu_table[,length(col_names)])
names(metadata_vals) <- otu_ids
} else {
metadata_vals <- NULL
}
list(
sample_ids=sample_ids, otu_ids=otu_ids, counts=counts,
metadata=metadata_vals)
}
read_qiime_otu_table("alpine_ridge_data/OTU_table.csv")
#'   tables generated with QIIME, so we default to TRUE.
#' @param metadata TRUE if the OTU table contains a metadata column, otherwise
#'   FALSE.  The metadata column usually contains taxonomic assignments, and
#'   must be located on the right-hand side of the table.
#' @return A list with four attributes: sample_ids, otu_ids, counts, and
#'   metadata, a data structure similar to that returned by the python
#'   function `qiime.parse.parse_otu_table`.  The sample_ids, otu_ids, and
#'   metadata attributes are character vectors.  The counts attribute is a
#'   matrix with one column per sample_id and one row per otu_id.
#' @export
read_qiime_otu_table <- function(filepath, commented=FALSE, metadata=TRUE) {
f <- file(filepath, "rt")
header_line <- readLines(f, n=1)
if (commented) {
header_line <- readLines(f, n=1)
}
col_names <- strsplit(header_line, "\t")[[1]]
col_classes <- rep("numeric", times=length(col_names))
col_classes[1] <- "character"
if (metadata) {
col_classes[length(col_classes)] <- "character"
}
full_otu_table <- read.table(
f, col.names=col_names, colClasses=col_classes, sep="\t",
quote="", as.is=TRUE, header=FALSE)
close(f)
data_cols <- if (metadata) {
2:(length(col_names) - 1)
} else {
2:length(col_names)
}
sample_ids <- col_names[data_cols]
otu_ids <- as.character(full_otu_table[,1])
counts <- as.matrix(full_otu_table[,data_cols])
rownames(counts) <- otu_ids
if (metadata) {
metadata_vals <- as.character(full_otu_table[,length(col_names)])
names(metadata_vals) <- otu_ids
} else {
metadata_vals <- NULL
}
list(
sample_ids=sample_ids, otu_ids=otu_ids, counts=counts,
metadata=metadata_vals)
}
read_qiime_otu_table("alpine_ridge_data/OTU_table.csv")
install.packages("phyloseq")
otu_table(otus)
otus<- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
View(otus)
abundance_values <- otus[,9:807]
abundance_values[,1:798] <- otus[,9:807]
abundance_values[,1:798] <- otus[9:807]
View(domain)
View(domain)
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Sample,  y = value, fill = taxa))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = taxa,  y = value, fill = taxa))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa,  y = value, fill = Taxa))
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa,  y = value, fill = Taxa))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, fill = Taxa))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Domain") + theme_classic()
print(domain_graph)
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, y = value, fill = class))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Domain") + theme_classic()
print(domain_graph)
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, y = n, fill = class))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Domain") + theme_classic()
print(domain_graph)
str(domain)
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, y = Bacteria, fill = Taxa))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Domain") + theme_classic()
print(domain_graph)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, y = value, fill = Taxa))
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, y = value, fill = Taxa))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Domain") + theme_classic()
print(domain_graph)
otus<- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
cbind(abundances, otus[7:807])
abundances_only <- otus[7:807]
rm(list=ls())
otus<- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
abundances_only <- otus[7:807]
abundances_only <- read.table(otus[7:807], header = TRUE)
otus[7:807]
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, y = domain$LH, fill = Taxa))
abundances_only <- otus[,c(7:807)]
abundances_only <- as.data.frame(otus[7:807])
abundances_only <- otus[,colnames(otus)[7:807]]
abundances_only <- otus[, colnames(otus)[c(7:807)]]
rm(list=ls())
otus<- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
abundances_only <- otus[, colnames(otus)[c(7:807)]]
View(otus)
abundances_only <- as.data.frame(otus, row.names = NULL, optional = FALSE, make.names = TRUE)
View(abundances_only)
abundances_only <- as.data.frame(otus[7:807], row.names = NULL, optional = FALSE, make.names = TRUE)
rm(list=ls())
otus<- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
abundances_only <- as.data.frame(otus[7:807], row.names = NULL, optional = FALSE, make.names = TRUE)
View(otus)
richness <- rowsums((otus > 0) * 1)
richness <- rowSums((otus > 0) * 1)
minimum.r <- min(rowSums(otus))
rarefy <- rarefy(x = otus, sample = minimum.r, se = TRUE)
rm(list=ls())
getwd()
library(vegan)
data(BCI)
str(BCI, max.level = 0)
S.obs <- function(x = ""){
rowSums(x > 0) * 1
}
S.obs(BCI)
specnumber(BCI)
C <- function(x = ""){
1 - (rowSums(x==1) / rowSums(x))
}
C(BCI)
soilbac <- read.table("data/soilbac.txt", sep = "\t", header = TRUE, row.names = 1)
soilbac.t <- as.data.frame(t(soilbac))
soilbac1 <- soilbac.t[1,]
S.obs(soilbac1)
C(soilbac1)
S.chao1 <- function(x = ""){
S.obs(x) + (sum(x==1)^2) / (2 * sum(x == 2))
}
S.chao2 <- function(site = "", SbyS = ""){
SbyS = as.data.frame(SbyS)
x = SbyS[site, ]
SbyS.pa <- (SbyS > 0) * 1
Q1 = sum(colSums(SbyS.pa) == 1)
Q2 = sum(colSums(SbyS.pa) == 2)
S.chao2 = S.obs(x) + (Q1^2)/(2 * Q2)
return(S.chao2)
}
S.ace <- function(x = "", thresh = 10){
x <- x[x>0]
S.abund <- length(which(x > thresh))
S.rare <- length(which(x <= thresh))
singlet <- length(which(x == 1))
N.rare <- sum(x[which(x <= thresh)])
C.ace <- 1 - (singlet / N.rare)
i <- c(1:thresh)
count <- function(i, y){
length(y[y == i])
}
a.1 <- sapply(i, count, x)
f.1 <- (i * (i - 1)) * a.1
G.ace <- (S.rare/C.ace) * (sum(f.1)/(N.rare*(N.rare-1)))
S.ace <- S.abund + (S.rare/C.ace) + (singlet/C.ace) * max(G.ace,0)
return(S.ace)
}
site1 <- BCI[1,]
print("Site 1 results")
S.chao1(site1)
S.chao2(1,BCI)
S.ace(site1)
print("SoilBac1 Results")
S.chao1(soilbac1)
S.chao2(1,soilbac.t)
S.ace(soilbac1)
View(site1)
View(site1)
soilbac.S <- S.obs(soilbac.t)
min.N <- min(rowSums(soilbac.t))
S.rarefy <- rarefy(x = soilbac.t, sample = min.N, se = TRUE)
rarecurve(x = soilbac.t, step = 20, col = "blue", cex = .6, las = 1)
View(soilbac)
abline(0, 1, col = 'red')
text(1500, 1500, "1:1", pos = 2, col = 'red')
richness <- rowSums((otus.t > 0) * 1)
otus <- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
otus.t <- t(otus)
richness <- rowSums((otus.t > 0) * 1)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
richness <- rowSums((otus.t > 0) * 1)
print(richness)
rm(list=ls())
otus <- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
otus.t <- t(otus)
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
rarecurve(x = otus.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(1500, 1500, pos = 2, col = 'red')
text(100, 1500, pos = 2, col = 'red')
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
rarecurve(x = otus.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(100, 1500, pos = 2, col = 'red')
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
rarecurve(x = otus.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(100, 100, pos = 2, col = 'red')
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
rarecurve(x = otus.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(100, 100, "1:1", pos = 2, col = 'red')
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
rarecurve(x = otus.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(200, 100, "1:1", pos = 2, col = 'red')
View(otus.t)
otus <- read.csv("alpine_ridge_data/modified_OTU_table.csv", header = TRUE)
otus.t <- t(otus)
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t), na.rm =TRUE)
minimum.r <- min(rowSums(otus.t[7:806]))
minimum.r <- min(rowSums(otus.t[,7:806]))
minimum.r <- min(rowSums(otus.t[7:806,]))
rm(list=ls())
otus <- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
otus.t <- t(otus)
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
rarecurve(x = otus.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(200, 100, "1:1", pos = 2, col = 'red')
# Chunk 1
rm(list=ls())
# Chunk 2
site_species <- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
site_species.t <- t(site_species)
# Chunk 3
#Visualization of rarecurves for all samples
library(vegan)
richness <- rowSums((site_species.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(site_species.t))
rarefy <- rarefy(x = site_species.t, sample = minimum.r, se = TRUE)
rarecurve(x = site_species.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(200, 100, "1:1", pos = 2, col = 'red')
# Chunk 4
#Rarefaction of samples
site_species.r <- rrarefy(site_species.t, 1000)
richness <- rowSums((site_species.r > 0) * 1)
minimum.r <- min(rowSums(site_species.r))
rarefy <- rarefy(x = site_species.r, sample = minimum.r, se = TRUE)
rarecurve(x = site_species.r, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(200, 100, "1:1", pos = 2, col = 'red')
# Chunk 5
#Remove samples containing less than 1000 reads (R1.14, R1.55.2, R2.25, S2.78.2)
df.site_species.r <- as.data.frame(site_species.r)
rarefied_site_species <- data.frame()
for (i in 1:nrow(df.site_species.r)){
if (rowSums(df.site_species.r[i,]) >= 1000){
rarefied_site_species <- rbind(rarefied_site_species, df.site_species.r[i,])
}
}
#Visualizing
richness <- rowSums((rarefied_site_species > 0) * 1)
minimum.r <- min(rowSums(rarefied_site_species))
rarefy <- rarefy(x = rarefied_site_species, sample = minimum.r, se = TRUE)
rarecurve(x = rarefied_site_species, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(200, 100, "1:1", pos = 2, col = 'red')
# Chunk 6
fungalBC <- vegdist(rarefied_site_species, method = "bray")
# Chunk 7
#Performing Cluster Analysis
fungal.ward <- hclust(fungalBC, method = "ward.D2")
#Plotting Cluster
par(mar = c(1,5,2,2) + .1)
plot(fungal.ward, main = "Doubs River Fish: Ward's Clustering",
ylab = "Squared Bray-Curtis Distance")
# Chunk 8
fungal.pcoa <- cmdscale(fungalBC, eig = TRUE, k = 3)
explainvar1 <- round(fungal.pcoa$eig[1]/sum(fungal.pcoa$eig), 3) * 100
explainvar2 <- round(fungal.pcoa$eig[2]/sum(fungal.pcoa$eig), 3) * 100
explainvar3 <- round(fungal.pcoa$eig[3]/sum(fungal.pcoa$eig), 3) * 100
sum.eig <- sum(explainvar1, explainvar2, explainvar3)
#Define Plot Parameters
par(mar = c(5,5,1,2), .1)
#Initiate Plot
plot(fungal.pcoa$points[,1], fungal.pcoa$points[,2], ylim = c(-.4, .5),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
#Add axis
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add Points & Labels
points(fungal.pcoa$points[,1], fungal.pcoa$points[,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(fungal.pcoa$points[,1], fungal.pcoa$points[,2],
labels = row.names(fungal.pcoa$points))
# Chunk 9
genus <- read.csv("alpine_ridge_data/genus_table.csv", header = TRUE)
#convert rownames into column
library(data.table)
genus.1 <- as.data.frame(t(rarefied_site_species))
setDT(genus.1, keep.rownames = TRUE)[]
# Converting to Long Format
library(reshape2)
genus_long <- melt(genus.1, id.vars = "rn", variable.name = "Sample")
# Creating Graph of data
library(ggplot2)
genus_graph <- ggplot(data = genus_long, mapping = aes(x = Sample,  y = value, fill = rn))
genus_graph <- genus_graph + geom_bar(stat="identity")
genus_graph <- genus_graph + labs(y = "Relative Abundance", x = "Sample", title = "Genus Relative Abundances") + theme_classic()
genus_graph <- genus_graph + theme(legend.position = "None")
genus_graph <- genus_graph + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
genus_graph
fungalBC <- vegdist(rarefied_site_species, method = "bray", binary = "TRUE")
#Performing Cluster Analysis
fungal.ward <- hclust(fungalBC, method = "ward.D2")
#Plotting Cluster
par(mar = c(1,5,2,2) + .1)
plot(fungal.ward, main = "Doubs River Fish: Ward's Clustering",
ylab = "Squared Bray-Curtis Distance")
fungalBC <- vegdist(rarefied_site_species, method = "bray")
fungalBC <- vegdist(rarefied_site_species, method = "bray")
fungalBC <- vegdist(rarefied_site_species, method = "bray")
# Chunk 1
rm(list=ls())
# Chunk 2
site_species <- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
site_species.t <- t(site_species)
# Chunk 3
#Visualization of rarecurves for all samples
library(vegan)
richness <- rowSums((site_species.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(site_species.t))
rarefy <- rarefy(x = site_species.t, sample = minimum.r, se = TRUE)
rarecurve(x = site_species.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(200, 100, "1:1", pos = 2, col = 'red')
# Chunk 4
#Rarefaction of samples
site_species.r <- rrarefy(site_species.t, 1000)
richness <- rowSums((site_species.r > 0) * 1)
minimum.r <- min(rowSums(site_species.r))
rarefy <- rarefy(x = site_species.r, sample = minimum.r, se = TRUE)
rarecurve(x = site_species.r, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(200, 100, "1:1", pos = 2, col = 'red')
# Chunk 5
#Remove samples containing less than 1000 reads (R1.14, R1.55.2, R2.25, S2.78.2)
df.site_species.r <- as.data.frame(site_species.r)
rarefied_site_species <- data.frame()
for (i in 1:nrow(df.site_species.r)){
if (rowSums(df.site_species.r[i,]) >= 1000){
rarefied_site_species <- rbind(rarefied_site_species, df.site_species.r[i,])
}
}
#Visualizing
richness <- rowSums((rarefied_site_species > 0) * 1)
minimum.r <- min(rowSums(rarefied_site_species))
rarefy <- rarefy(x = rarefied_site_species, sample = minimum.r, se = TRUE)
rarecurve(x = rarefied_site_species, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(200, 100, "1:1", pos = 2, col = 'red')
# Chunk 6
fungalBC <- vegdist(rarefied_site_species, method = "bray", binary = "TRUE")
# Chunk 7
#Performing Cluster Analysis
fungal.ward <- hclust(fungalBC, method = "ward.D2")
#Plotting Cluster
par(mar = c(1,5,2,2) + .1)
plot(fungal.ward, main = "Doubs River Fish: Ward's Clustering",
ylab = "Squared Bray-Curtis Distance")
# Chunk 8
fungalBC <- vegdist(rarefied_site_species, method = "bray")
# Chunk 9
#Performing Cluster Analysis
fungal.ward <- hclust(fungalBC, method = "ward.D2")
#Plotting Cluster
par(mar = c(1,5,2,2) + .1)
plot(fungal.ward, main = "Doubs River Fish: Ward's Clustering",
ylab = "Squared Bray-Curtis Distance")
# Chunk 10
fungal.pcoa <- cmdscale(fungalBC, eig = TRUE, k = 3)
explainvar1 <- round(fungal.pcoa$eig[1]/sum(fungal.pcoa$eig), 3) * 100
explainvar2 <- round(fungal.pcoa$eig[2]/sum(fungal.pcoa$eig), 3) * 100
explainvar3 <- round(fungal.pcoa$eig[3]/sum(fungal.pcoa$eig), 3) * 100
sum.eig <- sum(explainvar1, explainvar2, explainvar3)
#Define Plot Parameters
par(mar = c(5,5,1,2), .1)
#Initiate Plot
plot(fungal.pcoa$points[,1], fungal.pcoa$points[,2], ylim = c(-.4, .5),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
#Add axis
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add Points & Labels
points(fungal.pcoa$points[,1], fungal.pcoa$points[,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(fungal.pcoa$points[,1], fungal.pcoa$points[,2],
labels = row.names(fungal.pcoa$points))
# Chunk 11
genus <- read.csv("alpine_ridge_data/genus_table.csv", header = TRUE)
#convert rownames into column
library(data.table)
genus.1 <- as.data.frame(t(rarefied_site_species))
setDT(genus.1, keep.rownames = TRUE)[]
# Converting to Long Format
library(reshape2)
genus_long <- melt(genus.1, id.vars = "rn", variable.name = "Sample")
# Creating Graph of data
library(ggplot2)
genus_graph <- ggplot(data = genus_long, mapping = aes(x = Sample,  y = value, fill = rn))
genus_graph <- genus_graph + geom_bar(stat="identity")
genus_graph <- genus_graph + labs(y = "Relative Abundance", x = "Sample", title = "Genus Relative Abundances") + theme_classic()
genus_graph <- genus_graph + theme(legend.position = "None")
genus_graph <- genus_graph + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
genus_graph
fungalBC <- vegdist(rarefied_site_species, method = "bray", binary = "TRUE")
#Performing Cluster Analysis
fungal.ward <- hclust(fungalBC, method = "ward.D2")
#Plotting Cluster
par(mar = c(1,5,2,2) + .1)
plot(fungal.ward, main = "Doubs River Fish: Ward's Clustering",
ylab = "Squared Sørensen's Distance")
