PA<-replace(RAW_OTU, RAW_OTU>0, 1)
dim(PA)
names(PA)
#Transpose your matrix:
PA_t<-t(PA)
dim(PA_t)
#Make a figure of clust of all samples:
plot(col=c("black","blue"), hclust(dist(PA_t)))
#Make new objects with the two sample types.
b.S<-(PA_t[1:25,]) ##all S-plots
b.R<-PA_t[26:50,]  ##all R-plots
names(b.S)
b.S
b.R
#Use the method established by Ugland, the exact method.
spec_all<-specaccum(PA_t, method="exact", permutations=10000)
spec_S<-specaccum(b.S, method="exact", permutations=10000)
spec_R<-specaccum(b.R, method="exact", permutations=10000)
#Make the plot
#set the parameters for plot
if(.Platform$OS.type=="windows") {
quartz<-function() windows()
}
#to make the overal accumulation, separated accumulation and the estimations into a group figure:
windows(width=7.00787402, height=3.38582677)
par(mai=c(0.6,0.75,0.1,0.15), lwd=0.5, mar=c(3, 3, 1, 1), mgp=c(2,1,0), mfrow=c(1,3), cex=1)
plot(spec_all, cex.axis=0.7, cex.lab=0.7, ylab="OTUs", xlab="Samples", lwd=1)
legend(-5,800, "(a)", cex=0.7, bty="n")
#Plot the graph
plot(spec_S, ci.type="bar", ci.col="#018571", xlab="Samples", col="#018571", cex.axis=0.7, cex.lab=0.7, ylab="OTUs", xlim=c(0,26), lwd=1)
plot(spec_R, ci.type="bar", ci.col="#A6611A", add=TRUE, col="#A6611A", lwd=1)
#Add legends
legend(-2.5,590, "(b)", cex=0.7, bty="n")
legend(10, 115, c("Snowbed", "Ridge"), pch=16, cex=0.7, col=c("#018571", "#A6611A"), bty="n")
#Estimate diveristy
est_S<-specpool(PA_t[sample(1:25, , replace=FALSE),])
est_R<-specpool(PA_t[26:50,])
est_all<-specpool(PA_t)
est_S
est_R
est_all
setwd("C:/Users/joshu/quantbio/DiversityProject")
otus<- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
View(otus)
summary(otus)
print(otus)
str(otus)
rm(list=ls())
kingdom <- read.csv("kingdom-abund-report.csv", header = TRUE)
domain <- read.csv("domain-abund-report.csv", header = TRUE)
names(domain) <- c("Taxa", "LH", "LM", "AM", "Ped", "AM")
domain_graph <- ggplot(data = domain, mapping = aes(group = Taxa, x = sample,  y = SRR1292492.assembled.fastq))
domain_graph<- domain_graph+ geom_bar(stat="identity")
domain_graph<- domain_graph+ labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
domain_graph
rm(list=ls())
kingdom <- read.csv("kingdom-abund-report.csv", header = TRUE)
domain <- read.csv("domain-abund-report.csv", header = TRUE)
names(domain) <- c("Taxa", "LH", "LM", "AM", "Ped", "AM")
domain_graph <- ggplot(data = domain, mapping = aes(group = Taxa, x = sample,  y = SRR1292492.assembled.fastq))
domain_graph<- domain_graph+ geom_bar(stat="identity")
domain_graph<- domain_graph+ labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
domain_graph
View(domain)
print(domain_graph)
print(domain_graph)
print(domain_graph)
View(domain_graph)
domain_graph <- ggplot(data = domain, mapping = aes(group = Taxa, x = sample,  y = SRR1292492.assembled.fastq))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(group = Taxa, x = sample,  y = SRR1292492.assembled.fastq))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
library(ggplot2)
domain <- read.csv("domain-abund-report.csv", header = TRUE)
names(domain) <- c("Taxa", "LH", "LM", "AM", "Ped", "AM")
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(group = Taxa, x = sample,  y = SRR1292492.assembled.fastq))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
View(domain)
domain_graph <- ggplot(data = domain, mapping = aes(group = Taxa, x = sample,  y = domain[2:6]))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
domain <- read.csv("domain-abund-report.csv", header = TRUE)
names(domain) <- c("Taxa", "LH", "LM", "AM", "Ped", "LF")
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(group = Taxa, x = sample,  y = domain[2:6]))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
names(domain) <- c("Taxa", "LH", "LM", "AM", "Ped", "LF")
domain <- read.csv("domain-abund-report.csv", header = TRUE)
names(domain) <- c("Taxa", "LH", "LM", "AM", "Ped", "LF")
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(group = Taxa, x = sample,  y = SRR1292492.assembled.fastq))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
domain_graph <- ggplot(data = domain, mapping = aes(group = Taxa, x = sample,  y = LM))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
domain_graph <- ggplot(data = domain, mapping = aes(group = Taxa, x = domain[1:4,],  y = LM))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
#'   tables generated with QIIME, so we default to TRUE.
#' @param metadata TRUE if the OTU table contains a metadata column, otherwise
#'   FALSE.  The metadata column usually contains taxonomic assignments, and
#'   must be located on the right-hand side of the table.
#' @return A list with four attributes: sample_ids, otu_ids, counts, and
#'   metadata, a data structure similar to that returned by the python
#'   function `qiime.parse.parse_otu_table`.  The sample_ids, otu_ids, and
#'   metadata attributes are character vectors.  The counts attribute is a
#'   matrix with one column per sample_id and one row per otu_id.
#' @export
read_qiime_otu_table <- function(filepath, commented=TRUE, metadata=TRUE) {
f <- file(filepath, "rt")
header_line <- readLines(f, n=1)
if (commented) {
header_line <- readLines(f, n=1)
}
col_names <- strsplit(header_line, "\t")[[1]]
col_classes <- rep("numeric", times=length(col_names))
col_classes[1] <- "character"
if (metadata) {
col_classes[length(col_classes)] <- "character"
}
full_otu_table <- read.table(
f, col.names=col_names, colClasses=col_classes, sep="\t",
quote="", as.is=TRUE, header=FALSE)
close(f)
data_cols <- if (metadata) {
2:(length(col_names) - 1)
} else {
2:length(col_names)
}
sample_ids <- col_names[data_cols]
otu_ids <- as.character(full_otu_table[,1])
counts <- as.matrix(full_otu_table[,data_cols])
rownames(counts) <- otu_ids
if (metadata) {
metadata_vals <- as.character(full_otu_table[,length(col_names)])
names(metadata_vals) <- otu_ids
} else {
metadata_vals <- NULL
}
list(
sample_ids=sample_ids, otu_ids=otu_ids, counts=counts,
metadata=metadata_vals)
}
setwd("C:/Users/joshu/quantbio/DiversityProject")
read_qiime_otu_table("alpine_ridge_data/OTU_table.csv")
read_qiime_otu_table(alpine_ridge_data/OTU_table.csv)
#'   tables generated with QIIME, so we default to TRUE.
#' @param metadata TRUE if the OTU table contains a metadata column, otherwise
#'   FALSE.  The metadata column usually contains taxonomic assignments, and
#'   must be located on the right-hand side of the table.
#' @return A list with four attributes: sample_ids, otu_ids, counts, and
#'   metadata, a data structure similar to that returned by the python
#'   function `qiime.parse.parse_otu_table`.  The sample_ids, otu_ids, and
#'   metadata attributes are character vectors.  The counts attribute is a
#'   matrix with one column per sample_id and one row per otu_id.
#' @export
read_qiime_otu_table <- function(filepath, commented=TRUE, metadata=FALSE) {
f <- file(filepath, "rt")
header_line <- readLines(f, n=1)
if (commented) {
header_line <- readLines(f, n=1)
}
col_names <- strsplit(header_line, "\t")[[1]]
col_classes <- rep("numeric", times=length(col_names))
col_classes[1] <- "character"
if (metadata) {
col_classes[length(col_classes)] <- "character"
}
full_otu_table <- read.table(
f, col.names=col_names, colClasses=col_classes, sep="\t",
quote="", as.is=TRUE, header=FALSE)
close(f)
data_cols <- if (metadata) {
2:(length(col_names) - 1)
} else {
2:length(col_names)
}
sample_ids <- col_names[data_cols]
otu_ids <- as.character(full_otu_table[,1])
counts <- as.matrix(full_otu_table[,data_cols])
rownames(counts) <- otu_ids
if (metadata) {
metadata_vals <- as.character(full_otu_table[,length(col_names)])
names(metadata_vals) <- otu_ids
} else {
metadata_vals <- NULL
}
list(
sample_ids=sample_ids, otu_ids=otu_ids, counts=counts,
metadata=metadata_vals)
}
read_qiime_otu_table("alpine_ridge_data/OTU_table.csv")
#'   tables generated with QIIME, so we default to TRUE.
#' @param metadata TRUE if the OTU table contains a metadata column, otherwise
#'   FALSE.  The metadata column usually contains taxonomic assignments, and
#'   must be located on the right-hand side of the table.
#' @return A list with four attributes: sample_ids, otu_ids, counts, and
#'   metadata, a data structure similar to that returned by the python
#'   function `qiime.parse.parse_otu_table`.  The sample_ids, otu_ids, and
#'   metadata attributes are character vectors.  The counts attribute is a
#'   matrix with one column per sample_id and one row per otu_id.
#' @export
read_qiime_otu_table <- function(filepath, commented=FALSE, metadata=FALSE) {
f <- file(filepath, "rt")
header_line <- readLines(f, n=1)
if (commented) {
header_line <- readLines(f, n=1)
}
col_names <- strsplit(header_line, "\t")[[1]]
col_classes <- rep("numeric", times=length(col_names))
col_classes[1] <- "character"
if (metadata) {
col_classes[length(col_classes)] <- "character"
}
full_otu_table <- read.table(
f, col.names=col_names, colClasses=col_classes, sep="\t",
quote="", as.is=TRUE, header=FALSE)
close(f)
data_cols <- if (metadata) {
2:(length(col_names) - 1)
} else {
2:length(col_names)
}
sample_ids <- col_names[data_cols]
otu_ids <- as.character(full_otu_table[,1])
counts <- as.matrix(full_otu_table[,data_cols])
rownames(counts) <- otu_ids
if (metadata) {
metadata_vals <- as.character(full_otu_table[,length(col_names)])
names(metadata_vals) <- otu_ids
} else {
metadata_vals <- NULL
}
list(
sample_ids=sample_ids, otu_ids=otu_ids, counts=counts,
metadata=metadata_vals)
}
read_qiime_otu_table("alpine_ridge_data/OTU_table.csv")
#'   tables generated with QIIME, so we default to TRUE.
#' @param metadata TRUE if the OTU table contains a metadata column, otherwise
#'   FALSE.  The metadata column usually contains taxonomic assignments, and
#'   must be located on the right-hand side of the table.
#' @return A list with four attributes: sample_ids, otu_ids, counts, and
#'   metadata, a data structure similar to that returned by the python
#'   function `qiime.parse.parse_otu_table`.  The sample_ids, otu_ids, and
#'   metadata attributes are character vectors.  The counts attribute is a
#'   matrix with one column per sample_id and one row per otu_id.
#' @export
read_qiime_otu_table <- function(filepath, commented=FALSE, metadata=TRUE) {
f <- file(filepath, "rt")
header_line <- readLines(f, n=1)
if (commented) {
header_line <- readLines(f, n=1)
}
col_names <- strsplit(header_line, "\t")[[1]]
col_classes <- rep("numeric", times=length(col_names))
col_classes[1] <- "character"
if (metadata) {
col_classes[length(col_classes)] <- "character"
}
full_otu_table <- read.table(
f, col.names=col_names, colClasses=col_classes, sep="\t",
quote="", as.is=TRUE, header=FALSE)
close(f)
data_cols <- if (metadata) {
2:(length(col_names) - 1)
} else {
2:length(col_names)
}
sample_ids <- col_names[data_cols]
otu_ids <- as.character(full_otu_table[,1])
counts <- as.matrix(full_otu_table[,data_cols])
rownames(counts) <- otu_ids
if (metadata) {
metadata_vals <- as.character(full_otu_table[,length(col_names)])
names(metadata_vals) <- otu_ids
} else {
metadata_vals <- NULL
}
list(
sample_ids=sample_ids, otu_ids=otu_ids, counts=counts,
metadata=metadata_vals)
}
read_qiime_otu_table("alpine_ridge_data/OTU_table.csv")
install.packages("phyloseq")
otu_table(otus)
otus<- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
View(otus)
abundance_values <- otus[,9:807]
abundance_values[,1:798] <- otus[,9:807]
abundance_values[,1:798] <- otus[9:807]
View(domain)
View(domain)
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Sample,  y = value, fill = taxa))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = taxa,  y = value, fill = taxa))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa,  y = value, fill = Taxa))
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa,  y = value, fill = Taxa))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Class") + theme_classic()
print(domain_graph)
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, fill = Taxa))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Domain") + theme_classic()
print(domain_graph)
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, y = value, fill = class))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Domain") + theme_classic()
print(domain_graph)
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, y = n, fill = class))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Domain") + theme_classic()
print(domain_graph)
str(domain)
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, y = Bacteria, fill = Taxa))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Domain") + theme_classic()
print(domain_graph)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, y = value, fill = Taxa))
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, y = value, fill = Taxa))
domain_graph <- domain_graph + geom_bar(stat="identity")
domain_graph <- domain_graph + labs(y = "Relative Abundance", x = "Sample", title = "Domain") + theme_classic()
print(domain_graph)
otus<- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
cbind(abundances, otus[7:807])
abundances_only <- otus[7:807]
rm(list=ls())
otus<- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
abundances_only <- otus[7:807]
abundances_only <- read.table(otus[7:807], header = TRUE)
otus[7:807]
library(ggplot2)
domain_graph <- ggplot(data = domain, mapping = aes(x = Taxa, y = domain$LH, fill = Taxa))
abundances_only <- otus[,c(7:807)]
abundances_only <- as.data.frame(otus[7:807])
abundances_only <- otus[,colnames(otus)[7:807]]
abundances_only <- otus[, colnames(otus)[c(7:807)]]
rm(list=ls())
otus<- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
abundances_only <- otus[, colnames(otus)[c(7:807)]]
View(otus)
abundances_only <- as.data.frame(otus, row.names = NULL, optional = FALSE, make.names = TRUE)
View(abundances_only)
abundances_only <- as.data.frame(otus[7:807], row.names = NULL, optional = FALSE, make.names = TRUE)
rm(list=ls())
otus<- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
abundances_only <- as.data.frame(otus[7:807], row.names = NULL, optional = FALSE, make.names = TRUE)
View(otus)
richness <- rowsums((otus > 0) * 1)
richness <- rowSums((otus > 0) * 1)
minimum.r <- min(rowSums(otus))
rarefy <- rarefy(x = otus, sample = minimum.r, se = TRUE)
rm(list=ls())
getwd()
library(vegan)
data(BCI)
str(BCI, max.level = 0)
S.obs <- function(x = ""){
rowSums(x > 0) * 1
}
S.obs(BCI)
specnumber(BCI)
C <- function(x = ""){
1 - (rowSums(x==1) / rowSums(x))
}
C(BCI)
soilbac <- read.table("data/soilbac.txt", sep = "\t", header = TRUE, row.names = 1)
soilbac.t <- as.data.frame(t(soilbac))
soilbac1 <- soilbac.t[1,]
S.obs(soilbac1)
C(soilbac1)
S.chao1 <- function(x = ""){
S.obs(x) + (sum(x==1)^2) / (2 * sum(x == 2))
}
S.chao2 <- function(site = "", SbyS = ""){
SbyS = as.data.frame(SbyS)
x = SbyS[site, ]
SbyS.pa <- (SbyS > 0) * 1
Q1 = sum(colSums(SbyS.pa) == 1)
Q2 = sum(colSums(SbyS.pa) == 2)
S.chao2 = S.obs(x) + (Q1^2)/(2 * Q2)
return(S.chao2)
}
S.ace <- function(x = "", thresh = 10){
x <- x[x>0]
S.abund <- length(which(x > thresh))
S.rare <- length(which(x <= thresh))
singlet <- length(which(x == 1))
N.rare <- sum(x[which(x <= thresh)])
C.ace <- 1 - (singlet / N.rare)
i <- c(1:thresh)
count <- function(i, y){
length(y[y == i])
}
a.1 <- sapply(i, count, x)
f.1 <- (i * (i - 1)) * a.1
G.ace <- (S.rare/C.ace) * (sum(f.1)/(N.rare*(N.rare-1)))
S.ace <- S.abund + (S.rare/C.ace) + (singlet/C.ace) * max(G.ace,0)
return(S.ace)
}
site1 <- BCI[1,]
print("Site 1 results")
S.chao1(site1)
S.chao2(1,BCI)
S.ace(site1)
print("SoilBac1 Results")
S.chao1(soilbac1)
S.chao2(1,soilbac.t)
S.ace(soilbac1)
View(site1)
View(site1)
soilbac.S <- S.obs(soilbac.t)
min.N <- min(rowSums(soilbac.t))
S.rarefy <- rarefy(x = soilbac.t, sample = min.N, se = TRUE)
rarecurve(x = soilbac.t, step = 20, col = "blue", cex = .6, las = 1)
View(soilbac)
abline(0, 1, col = 'red')
text(1500, 1500, "1:1", pos = 2, col = 'red')
richness <- rowSums((otus.t > 0) * 1)
otus <- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
otus.t <- t(otus)
richness <- rowSums((otus.t > 0) * 1)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
richness <- rowSums((otus.t > 0) * 1)
print(richness)
rm(list=ls())
otus <- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
otus.t <- t(otus)
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
rarecurve(x = otus.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(1500, 1500, pos = 2, col = 'red')
text(100, 1500, pos = 2, col = 'red')
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
rarecurve(x = otus.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(100, 1500, pos = 2, col = 'red')
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
rarecurve(x = otus.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(100, 100, pos = 2, col = 'red')
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
rarecurve(x = otus.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(100, 100, "1:1", pos = 2, col = 'red')
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
rarecurve(x = otus.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(200, 100, "1:1", pos = 2, col = 'red')
View(otus.t)
otus <- read.csv("alpine_ridge_data/modified_OTU_table.csv", header = TRUE)
otus.t <- t(otus)
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t), na.rm =TRUE)
minimum.r <- min(rowSums(otus.t[7:806]))
minimum.r <- min(rowSums(otus.t[,7:806]))
minimum.r <- min(rowSums(otus.t[7:806,]))
rm(list=ls())
otus <- read.csv("alpine_ridge_data/OTU_table.csv", header = TRUE)
otus.t <- t(otus)
richness <- rowSums((otus.t > 0) * 1)
print(richness)
minimum.r <- min(rowSums(otus.t))
rarefy <- rarefy(x = otus.t, sample = minimum.r, se = TRUE)
rarecurve(x = otus.t, step = 20, col = "blue", cex = .6, las = 1)
abline(0, 1, col = 'red')
text(200, 100, "1:1", pos = 2, col = 'red')
